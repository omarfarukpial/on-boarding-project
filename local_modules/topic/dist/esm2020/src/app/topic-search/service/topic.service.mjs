import { Injectable } from '@angular/core';
import { EndecapodService, SearchResult } from '@ibfd/endecapod';
import { Subject, BehaviorSubject, of } from 'rxjs';
import { catchError, filter, map, first, concatMap, take } from 'rxjs/operators';
import { cloneDeep } from 'lodash-es';
import * as i0 from "@angular/core";
import * as i1 from "@ibfd/endecapod";
import * as i2 from "./taxtopics-provider.service";
import * as i3 from "@angular/router";
import * as i4 from "@angular/common/http";
export class TopicService {
    constructor(urlSerializer, taxtopicProviderSvc, router, http) {
        this.urlSerializer = urlSerializer;
        this.taxtopicProviderSvc = taxtopicProviderSvc;
        this.error = new BehaviorSubject(false);
        this.initTopicSvc = new EndecapodService(http, router, urlSerializer);
    }
    registerConfig(config) {
        this.topicConfig = config.topicConfig;
        this._endecaUrl = config.endecapodUrl;
        this._awareUrl = config.awareUrl;
        this._suppressedChips = config.suppressedChips;
    }
    loadInitTaxTopics() {
        this.shouldFetchInitialTaxtopics()
            .pipe(filter(Boolean), take(1))
            .subscribe(() => this.fetchInitialTaxtopics());
        this.getTopicValues(this.initTopicSvc.Result())
            .pipe(map(res => {
            const topics = res.topics;
            Object.keys(topics).map(e => topics[e])
                .forEach(obj => obj['selectable'] = false);
            return topics;
        }), take(1), catchError(this.handle_error))
            .subscribe(t => {
            this.taxtopicProviderSvc.addTaxtopicsGroup(t, this.topicConfig.id);
        });
        return true;
    }
    shouldFetchInitialTaxtopics() {
        const initQuery = this.topicConfig.query;
        if (!initQuery || initQuery.length === 0) {
            return of(true);
        }
        return this.taxtopicProviderSvc.isTaxtopicsGroupExist(this.topicConfig.id)
            .pipe(map(exist => !exist));
    }
    fetchInitialTaxtopics() {
        this.initTopicSvc.setName('TopicTreeInitService');
        this.initTopicSvc.setURL(this._endecaUrl, this._awareUrl);
        this.initTopicSvc.RegisterParams(this.urlSerializer.parse('?' + this.topicConfig.query).queryParamMap);
        this.initTopicSvc.DoSearch();
    }
    buildTopicTree(searchedTopics, expandedNodes) {
        this.taxtopicProviderSvc.getTaxtopics(this.topicConfig.id)
            .pipe(filter(taxtopics => !!taxtopics))
            .subscribe({
            next: taxtopics => {
                // Updating taxonomy taxtopics by searched topics from endeca
                const clonedTaxtopics = cloneDeep(taxtopics);
                this.updateAvailableTopics(clonedTaxtopics, Object.keys(searchedTopics['topics']));
                this.topicTreeProvider.next(this.buildPrimeNgTree(clonedTaxtopics, searchedTopics['chips'], expandedNodes));
            },
            error: err => { this.error.next(err); }
        });
    }
    buildDocTopicTree(topicCodes) {
        this.taxtopicProviderSvc.getTaxtopics(this.topicConfig.id)
            .pipe(filter(taxtopics => !!taxtopics))
            .subscribe({
            next: taxtopics => {
                const clonedTaxtopics = cloneDeep(taxtopics);
                this.updateAvailableDocTopics(clonedTaxtopics, topicCodes);
                const docTopicTree = this.buildPrimeNgTree(clonedTaxtopics, [], new Set()).data;
                this.docTopicTreeProvider.next(docTopicTree);
            },
            error: err => { this.error.next(err); }
        });
    }
    updateAvailableDocTopics(taxtopics, topicCodes) {
        topicCodes.forEach(topicCode => {
            const taxtopic = taxtopics[topicCode];
            if (taxtopic) {
                taxtopic.selectable = true;
                let parentLabel = this.getTaxtopicParentLabel(topicCode);
                while (parentLabel.lastIndexOf('_') > 0) {
                    const parent = taxtopics[parentLabel];
                    if (parent) {
                        parent.selectable = true;
                    }
                    parentLabel = this.getTaxtopicParentLabel(parentLabel);
                }
            }
        });
    }
    updateAvailableTopics(taxtopics, topicCodes) {
        topicCodes.forEach(topicCode => {
            const taxtopic = taxtopics[topicCode];
            if (taxtopic) {
                taxtopic.selectable = true;
            }
        });
    }
    getTopicTree() {
        return (this.topicTreeProvider = this.topicTreeProvider || new Subject()).asObservable();
    }
    getDocTopicTree() {
        return (this.docTopicTreeProvider = this.docTopicTreeProvider || new Subject()).asObservable();
    }
    buildPrimeNgTree(taxtopics, chips, expandedNodes) {
        return Object.keys(taxtopics)
            .map(e => taxtopics[e])
            .reduce((acc, taxtopic) => {
            const node = {
                label: taxtopic['label'],
                data: taxtopic['code'],
                selectable: taxtopic['selectable'],
                id: taxtopic['id'],
                key: taxtopic['code']
            };
            if (chips.find(id => id === node.id)) {
                acc.selected.push(node);
            }
            node['expanded'] = expandedNodes.has(node.id);
            const parent = this.getTaxtopicParent(acc.data, this.getTaxtopicParentLabel(node.data));
            if (parent) {
                if (!parent['children']) {
                    parent['children'] = [];
                }
                node['parent'] = parent;
                parent['children'].push(node);
            }
            else {
                acc.data.push(node);
            }
            return acc;
        }, { data: [], selected: [] });
    }
    getTaxtopicParentLabel(tc) {
        return tc.substring(0, tc.lastIndexOf('_'));
    }
    getTaxtopicParent(acc, parentLabel) {
        for (let i = 0; i < acc.length; i++) {
            const taxtopic = acc[i];
            if (taxtopic['data'] === parentLabel) {
                return taxtopic;
            }
            if (taxtopic['children']) {
                const taxtopicParent = this.getTaxtopicParent(taxtopic['children'], parentLabel);
                if (taxtopicParent) {
                    return taxtopicParent;
                }
            }
        }
    }
    searchTopics(topicExposeService, endecapodService) {
        return endecapodService.runningquery().pipe(filter(rq => !!rq), concatMap(q => {
            topicExposeService.ExposeMultipleOnExisting(endecapodService, this.topicConfig.dimensions.map(dim => dim.id), this.topicConfig.dimensions.map(dim => dim.name).join(','));
            return this.getTopicValues(topicExposeService.Result());
        }));
    }
    getTopicValues(searchresult) {
        return searchresult.pipe(filter(res => res instanceof SearchResult), map((res) => {
            let topics = [];
            this.topicConfig.dimensions
                .forEach(d => {
                topics = topics.concat(res.getDimensionValuesOrAssociated(d));
            });
            const chips = res.getChips()
                .filter(c1 => !this._suppressedChips.find(s => c1.parent.id === s))
                .map(chip => chip.dimension.id);
            return { topics: topics, chips: chips };
        }), first(), map(obj => {
            const topics = obj.topics
                .map(topic => {
                const name = topic.name;
                return {
                    code: name.substring(0, name.indexOf(' ')),
                    label: name.substring(name.indexOf(' ') + 1),
                    id: topic.id
                };
            })
                .sort((t1, t2) => t1.code.localeCompare(t2.code, undefined, { numeric: true, sensitivity: 'base' }))
                .reduce((acc, topic) => {
                return Object.assign(acc, { [topic['code']]: topic });
            }, {});
            return { topics: topics, chips: obj.chips };
        }), first(), catchError(this.handle_error));
    }
    handle_error(error, caught) {
        let errMsg;
        if (error instanceof Response) {
            const err = error.json().then(json => JSON.stringify(json)) || '';
            errMsg = `${error.status} - ${error.statusText || ''} ${err}`;
        }
        else {
            errMsg = error.message ? error.message : error.toString();
        }
        throw (new Error(errMsg));
    }
    getError() {
        return this.error.asObservable();
    }
}
TopicService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.4.0", ngImport: i0, type: TopicService, deps: [{ token: i1.EdcaUrlSerializer }, { token: i2.TaxtopicsProviderService }, { token: i3.Router }, { token: i4.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable });
TopicService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.4.0", ngImport: i0, type: TopicService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.4.0", ngImport: i0, type: TopicService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.EdcaUrlSerializer }, { type: i2.TaxtopicsProviderService }, { type: i3.Router }, { type: i4.HttpClient }]; } });
//# sourceMappingURL=data:application/json;base64,