import { EndecapodService, SearchResult, EdcaUrlSerializer } from '@ibfd/endecapod';
import { Observable } from 'rxjs';
import { TopicServiceConfig } from '../model/topic-service-config';
import { TaxtopicsProviderService } from './taxtopics-provider.service';
import { Router } from '@angular/router';
import { HttpClient } from '@angular/common/http';
import * as i0 from "@angular/core";
export declare class TopicService {
    private urlSerializer;
    private taxtopicProviderSvc;
    private topicTreeProvider;
    private docTopicTreeProvider;
    private error;
    private initTopicSvc;
    private _endecaUrl;
    private _awareUrl;
    private _suppressedChips;
    private topicConfig;
    constructor(urlSerializer: EdcaUrlSerializer, taxtopicProviderSvc: TaxtopicsProviderService, router: Router, http: HttpClient);
    registerConfig(config: TopicServiceConfig): void;
    loadInitTaxTopics(): boolean;
    private shouldFetchInitialTaxtopics;
    private fetchInitialTaxtopics;
    buildTopicTree(searchedTopics: Object, expandedNodes: Set<number>): void;
    buildDocTopicTree(topicCodes: string[]): void;
    private updateAvailableDocTopics;
    private updateAvailableTopics;
    getTopicTree(): Observable<any>;
    getDocTopicTree(): Observable<any>;
    private buildPrimeNgTree;
    private getTaxtopicParentLabel;
    private getTaxtopicParent;
    searchTopics(topicExposeService: EndecapodService, endecapodService: EndecapodService): Observable<boolean | SearchResult>;
    private getTopicValues;
    private handle_error;
    getError(): Observable<Error | Boolean>;
    static ɵfac: i0.ɵɵFactoryDeclaration<TopicService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<TopicService>;
}
